/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface KernelInterface extends utils.Interface {
  functions: {
    "KERNEL_ADMIN()": FunctionFragment;
    "__semver()": FunctionFragment;
    "addPermission(bytes32,bytes32,uint8)": FunctionFragment;
    "connectApp(bytes32,address,bool)": FunctionFragment;
    "deployAndConfigure(bytes32,bytes,bytes[],bytes[])": FunctionFragment;
    "deployApp(bytes32,bytes)": FunctionFragment;
    "deploySafe(address[],uint256)": FunctionFragment;
    "getAppAddress(bytes32)": FunctionFragment;
    "getPermissions(bytes32,bytes32)": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "getUpdateManager()": FunctionFragment;
    "hasPermission(address,address,uint8)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "migrateApp(bytes32)": FunctionFragment;
    "migrateApps(bytes32[])": FunctionFragment;
    "migrateToBeacon(address,address)": FunctionFragment;
    "migrateTreasury()": FunctionFragment;
    "removePermission(bytes32,bytes32,uint8)": FunctionFragment;
    "resetApp(bytes32,address,bool)": FunctionFragment;
    "safeFactory()": FunctionFragment;
    "safeFallbackHandler()": FunctionFragment;
    "safeSingleton()": FunctionFragment;
    "setEvent(bytes32[])": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgrade(address)": FunctionFragment;
    "upgradeApp(bytes32)": FunctionFragment;
    "upgradeAppImpl(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KERNEL_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__semver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPermission",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectApp",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndConfigure",
    values: [BytesLike, BytesLike, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployApp",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySafe",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissions",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateApp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateApps",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToBeacon",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePermission",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetApp",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "safeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeFallbackHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEvent",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeApp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAppImpl",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "KERNEL_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__semver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAndConfigure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploySafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrateApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateApps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAppImpl",
    data: BytesLike
  ): Result;

  events: {
    "Init(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MigratedToSafe(address,bool,bool)": EventFragment;
    "ProxyMigrated(address,address)": EventFragment;
    "SafeDeployed(address)": EventFragment;
    "SetApp(bytes32,address,bool)": EventFragment;
    "TreasuryChanged(address)": EventFragment;
    "Upgrade(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigratedToSafe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
}

export type InitEvent = TypedEvent<[string], { kernel: string }>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type MigratedToSafeEvent = TypedEvent<
  [string, boolean, boolean],
  { safe: string; treasury: boolean; controller: boolean }
>;

export type MigratedToSafeEventFilter = TypedEventFilter<MigratedToSafeEvent>;

export type ProxyMigratedEvent = TypedEvent<
  [string, string],
  { newBeacon: string; beaconProxy: string }
>;

export type ProxyMigratedEventFilter = TypedEventFilter<ProxyMigratedEvent>;

export type SafeDeployedEvent = TypedEvent<[string], { safe: string }>;

export type SafeDeployedEventFilter = TypedEventFilter<SafeDeployedEvent>;

export type SetAppEvent = TypedEvent<
  [string, string, boolean],
  { id: string; app: string; isNative: boolean }
>;

export type SetAppEventFilter = TypedEventFilter<SetAppEvent>;

export type TreasuryChangedEvent = TypedEvent<[string], { treasury: string }>;

export type TreasuryChangedEventFilter = TypedEventFilter<TreasuryChangedEvent>;

export type UpgradeEvent = TypedEvent<[string], { code: string }>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface Kernel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KernelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KERNEL_ADMIN(overrides?: CallOverrides): Promise<[number]>;

    __semver(overrides?: CallOverrides): Promise<[string]>;

    addPermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployAndConfigure(
      id: BytesLike,
      initializeAppData: BytesLike,
      kernelData: BytesLike[],
      proxyData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployApp(
      id: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    getUpdateManager(overrides?: CallOverrides): Promise<[string]>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      sudo: string,
      releaseManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    migrateApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateApps(
      ids: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateToBeacon(
      newBeacon: string,
      beaconProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeFactory(overrides?: CallOverrides): Promise<[string]>;

    safeFallbackHandler(overrides?: CallOverrides): Promise<[string]>;

    safeSingleton(overrides?: CallOverrides): Promise<[string]>;

    setEvent(
      appsIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeAppImpl(
      id: BytesLike,
      appImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  KERNEL_ADMIN(overrides?: CallOverrides): Promise<number>;

  __semver(overrides?: CallOverrides): Promise<string>;

  addPermission(
    requesterAppId: BytesLike,
    appId: BytesLike,
    permissionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectApp(
    id: BytesLike,
    appAddress: string,
    isNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployAndConfigure(
    id: BytesLike,
    initializeAppData: BytesLike,
    kernelData: BytesLike[],
    proxyData: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployApp(
    id: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploySafe(
    owners: string[],
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

  getPermissions(
    entity: BytesLike,
    app: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  getUpdateManager(overrides?: CallOverrides): Promise<string>;

  hasPermission(
    entityAddress: string,
    appAddress: string,
    permissionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    sudo: string,
    releaseManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  migrateApp(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateApps(
    ids: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateToBeacon(
    newBeacon: string,
    beaconProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePermission(
    requesterAppId: BytesLike,
    appId: BytesLike,
    permissionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetApp(
    id: BytesLike,
    appAddress: string,
    isNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeFactory(overrides?: CallOverrides): Promise<string>;

  safeFallbackHandler(overrides?: CallOverrides): Promise<string>;

  safeSingleton(overrides?: CallOverrides): Promise<string>;

  setEvent(
    appsIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgrade(
    appCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeApp(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeAppImpl(
    id: BytesLike,
    appImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    KERNEL_ADMIN(overrides?: CallOverrides): Promise<number>;

    __semver(overrides?: CallOverrides): Promise<string>;

    addPermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deployAndConfigure(
      id: BytesLike,
      initializeAppData: BytesLike,
      kernelData: BytesLike[],
      proxyData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    deployApp(
      id: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    getUpdateManager(overrides?: CallOverrides): Promise<string>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      sudo: string,
      releaseManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    migrateApp(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    migrateApps(ids: BytesLike[], overrides?: CallOverrides): Promise<void>;

    migrateToBeacon(
      newBeacon: string,
      beaconProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateTreasury(overrides?: CallOverrides): Promise<void>;

    removePermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    safeFactory(overrides?: CallOverrides): Promise<string>;

    safeFallbackHandler(overrides?: CallOverrides): Promise<string>;

    safeSingleton(overrides?: CallOverrides): Promise<string>;

    setEvent(appsIds: BytesLike[], overrides?: CallOverrides): Promise<void>;

    setTreasury(treasury: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgrade(appCode: string, overrides?: CallOverrides): Promise<void>;

    upgradeApp(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    upgradeAppImpl(
      id: BytesLike,
      appImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Init(address)"(kernel?: null): InitEventFilter;
    Init(kernel?: null): InitEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MigratedToSafe(address,bool,bool)"(
      safe?: null,
      treasury?: null,
      controller?: null
    ): MigratedToSafeEventFilter;
    MigratedToSafe(
      safe?: null,
      treasury?: null,
      controller?: null
    ): MigratedToSafeEventFilter;

    "ProxyMigrated(address,address)"(
      newBeacon?: null,
      beaconProxy?: null
    ): ProxyMigratedEventFilter;
    ProxyMigrated(
      newBeacon?: null,
      beaconProxy?: null
    ): ProxyMigratedEventFilter;

    "SafeDeployed(address)"(safe?: null): SafeDeployedEventFilter;
    SafeDeployed(safe?: null): SafeDeployedEventFilter;

    "SetApp(bytes32,address,bool)"(
      id?: null,
      app?: null,
      isNative?: null
    ): SetAppEventFilter;
    SetApp(id?: null, app?: null, isNative?: null): SetAppEventFilter;

    "TreasuryChanged(address)"(treasury?: null): TreasuryChangedEventFilter;
    TreasuryChanged(treasury?: null): TreasuryChangedEventFilter;

    "Upgrade(address)"(code?: null): UpgradeEventFilter;
    Upgrade(code?: null): UpgradeEventFilter;
  };

  estimateGas: {
    KERNEL_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    __semver(overrides?: CallOverrides): Promise<BigNumber>;

    addPermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployAndConfigure(
      id: BytesLike,
      initializeAppData: BytesLike,
      kernelData: BytesLike[],
      proxyData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployApp(
      id: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getUpdateManager(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      sudo: string,
      releaseManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    migrateApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateApps(
      ids: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateToBeacon(
      newBeacon: string,
      beaconProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    safeFallbackHandler(overrides?: CallOverrides): Promise<BigNumber>;

    safeSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    setEvent(
      appsIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeAppImpl(
      id: BytesLike,
      appImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KERNEL_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __semver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployAndConfigure(
      id: BytesLike,
      initializeAppData: BytesLike,
      kernelData: BytesLike[],
      proxyData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployApp(
      id: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAppAddress(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpdateManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      sudo: string,
      releaseManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateApps(
      ids: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateToBeacon(
      newBeacon: string,
      beaconProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePermission(
      requesterAppId: BytesLike,
      appId: BytesLike,
      permissionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeFallbackHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSingleton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEvent(
      appsIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeAppImpl(
      id: BytesLike,
      appImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
