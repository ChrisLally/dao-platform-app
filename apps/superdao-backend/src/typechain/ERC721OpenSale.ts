/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ERC721OpenSaleInterface extends utils.Interface {
  functions: {
    "__semver()": FunctionFragment;
    "buy(address,bytes32,address)": FunctionFragment;
    "claimLimit()": FunctionFragment;
    "claims(address)": FunctionFragment;
    "getLeftClaimsForTier(bytes32)": FunctionFragment;
    "getLeftClaimsForWallet(address,bytes32)": FunctionFragment;
    "getPrice(address,bytes32)": FunctionFragment;
    "getPriceInNativeTokens(bytes32)": FunctionFragment;
    "getSales()": FunctionFragment;
    "getTime()": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address,address,bytes)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "setActive(bool)": FunctionFragment;
    "setClaimLimit(uint64)": FunctionFragment;
    "setPaymentPolicy(bytes32[],uint256[])": FunctionFragment;
    "setSalesController(address)": FunctionFragment;
    "setTierPerWalletLimits(bytes32[],uint256[])": FunctionFragment;
    "setTiersActive(bytes32[],bool[])": FunctionFragment;
    "setTimeOfSale(uint256,uint256)": FunctionFragment;
    "setTokenSaleAddress(address)": FunctionFragment;
    "setTotalClaimsLimits(uint64)": FunctionFragment;
    "tierPerWalletClaimed(address,bytes32)": FunctionFragment;
    "tierPerWalletLimit(bytes32)": FunctionFragment;
    "tierPrices(bytes32)": FunctionFragment;
    "tiersActive(bytes32)": FunctionFragment;
    "tokenSaleAddress()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalClaimsLimit()": FunctionFragment;
    "upgrade(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "__semver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claims", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLeftClaimsForTier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeftClaimsForWallet",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInNativeTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSales", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "setActive", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setClaimLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentPolicy",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalesController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierPerWalletLimits",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTiersActive",
    values: [BytesLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeOfSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenSaleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalClaimsLimits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tierPerWalletClaimed",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tierPerWalletLimit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tierPrices",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tiersActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSaleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;

  decodeFunctionResult(functionFragment: "__semver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLeftClaimsForTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeftClaimsForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInNativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierPerWalletLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTiersActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeOfSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenSaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalClaimsLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierPerWalletClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierPerWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tierPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tiersActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {
    "Init(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OnBuy(address,address,bytes32,uint256,address,string,string)": EventFragment;
    "SetActive(bool)": EventFragment;
    "SetClaimLimit(uint64)": EventFragment;
    "SetPaymentPolicy(bytes32[],uint256[])": EventFragment;
    "SetSalesController(address)": EventFragment;
    "SetTiersActive(bytes32[],bool[])": EventFragment;
    "SetTimeOfSale(uint256,uint256)": EventFragment;
    "TokenSaleAddress(address)": EventFragment;
    "Upgrade(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClaimLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaymentPolicy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSalesController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTiersActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTimeOfSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSaleAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
}

export type InitEvent = TypedEvent<[string], { kernel: string }>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OnBuyEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, string],
  {
    buyer: string;
    appAddress: string;
    tierValue: string;
    cost: BigNumber;
    buyToken: string;
    saleType: string;
    semver: string;
  }
>;

export type OnBuyEventFilter = TypedEventFilter<OnBuyEvent>;

export type SetActiveEvent = TypedEvent<[boolean], { isActive: boolean }>;

export type SetActiveEventFilter = TypedEventFilter<SetActiveEvent>;

export type SetClaimLimitEvent = TypedEvent<
  [BigNumber],
  { claimLimit: BigNumber }
>;

export type SetClaimLimitEventFilter = TypedEventFilter<SetClaimLimitEvent>;

export type SetPaymentPolicyEvent = TypedEvent<
  [string[], BigNumber[]],
  { tierValues: string[]; tierPrices_: BigNumber[] }
>;

export type SetPaymentPolicyEventFilter =
  TypedEventFilter<SetPaymentPolicyEvent>;

export type SetSalesControllerEvent = TypedEvent<
  [string],
  { salesController: string }
>;

export type SetSalesControllerEventFilter =
  TypedEventFilter<SetSalesControllerEvent>;

export type SetTiersActiveEvent = TypedEvent<
  [string[], boolean[]],
  { tiers: string[]; active: boolean[] }
>;

export type SetTiersActiveEventFilter = TypedEventFilter<SetTiersActiveEvent>;

export type SetTimeOfSaleEvent = TypedEvent<
  [BigNumber, BigNumber],
  { start: BigNumber; end: BigNumber }
>;

export type SetTimeOfSaleEventFilter = TypedEventFilter<SetTimeOfSaleEvent>;

export type TokenSaleAddressEvent = TypedEvent<
  [string],
  { tokenSaleAddress_: string }
>;

export type TokenSaleAddressEventFilter =
  TypedEventFilter<TokenSaleAddressEvent>;

export type UpgradeEvent = TypedEvent<[string], { code: string }>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface ERC721OpenSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721OpenSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __semver(overrides?: CallOverrides): Promise<[string]>;

    buy(
      to: string,
      tierValue: BytesLike,
      tokenBuyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    claims(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getLeftClaimsForTier(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLeftClaimsForWallet(
      wallet: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      tokenAddress: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tradePrice: BigNumber;
        costInBuyTokens: BigNumber;
      }
    >;

    getPriceInNativeTokens(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { costInBuyTokens: BigNumber }>;

    getSales(overrides?: CallOverrides): Promise<[string]>;

    getTime(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _kernel: string,
      _salesController: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    setActive(
      isActive_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimLimit(
      claimLimit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSalesController(
      newSales: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTierPerWalletLimits(
      tierValues: BytesLike[],
      tierLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTiersActive(
      tierValues: BytesLike[],
      activity: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeOfSale(
      start_: BigNumberish,
      end_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenSaleAddress(
      tokenSaleAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalClaimsLimits(
      totalClaims: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tierPerWalletClaimed(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tierPerWalletLimit(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tierPrices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tiersActive(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    tokenSaleAddress(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimsLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __semver(overrides?: CallOverrides): Promise<string>;

  buy(
    to: string,
    tierValue: BytesLike,
    tokenBuyAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimLimit(overrides?: CallOverrides): Promise<BigNumber>;

  claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLeftClaimsForTier(
    tierValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLeftClaimsForWallet(
    wallet: string,
    tierValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    tokenAddress: string,
    tierValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tradePrice: BigNumber;
      costInBuyTokens: BigNumber;
    }
  >;

  getPriceInNativeTokens(
    tierValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSales(overrides?: CallOverrides): Promise<string>;

  getTime(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    _kernel: string,
    _salesController: string,
    _options: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  setActive(
    isActive_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimLimit(
    claimLimit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentPolicy(
    tierValues: BytesLike[],
    tierPrices_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSalesController(
    newSales: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTierPerWalletLimits(
    tierValues: BytesLike[],
    tierLimits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTiersActive(
    tierValues: BytesLike[],
    activity: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeOfSale(
    start_: BigNumberish,
    end_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenSaleAddress(
    tokenSaleAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalClaimsLimits(
    totalClaims: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tierPerWalletClaimed(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tierPerWalletLimit(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tierPrices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  tiersActive(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  tokenSaleAddress(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimsLimit(overrides?: CallOverrides): Promise<BigNumber>;

  upgrade(
    appCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __semver(overrides?: CallOverrides): Promise<string>;

    buy(
      to: string,
      tierValue: BytesLike,
      tokenBuyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimLimit(overrides?: CallOverrides): Promise<BigNumber>;

    claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLeftClaimsForTier(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLeftClaimsForWallet(
      wallet: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      tokenAddress: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tradePrice: BigNumber;
        costInBuyTokens: BigNumber;
      }
    >;

    getPriceInNativeTokens(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSales(overrides?: CallOverrides): Promise<string>;

    getTime(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      _kernel: string,
      _salesController: string,
      _options: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    setActive(isActive_: boolean, overrides?: CallOverrides): Promise<void>;

    setClaimLimit(
      claimLimit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSalesController(
      newSales: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTierPerWalletLimits(
      tierValues: BytesLike[],
      tierLimits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTiersActive(
      tierValues: BytesLike[],
      activity: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeOfSale(
      start_: BigNumberish,
      end_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenSaleAddress(
      tokenSaleAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalClaimsLimits(
      totalClaims: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tierPerWalletClaimed(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierPerWalletLimit(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierPrices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tiersActive(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    tokenSaleAddress(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(appCode: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Init(address)"(kernel?: null): InitEventFilter;
    Init(kernel?: null): InitEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OnBuy(address,address,bytes32,uint256,address,string,string)"(
      buyer?: null,
      appAddress?: null,
      tierValue?: null,
      cost?: null,
      buyToken?: null,
      saleType?: null,
      semver?: null
    ): OnBuyEventFilter;
    OnBuy(
      buyer?: null,
      appAddress?: null,
      tierValue?: null,
      cost?: null,
      buyToken?: null,
      saleType?: null,
      semver?: null
    ): OnBuyEventFilter;

    "SetActive(bool)"(isActive?: null): SetActiveEventFilter;
    SetActive(isActive?: null): SetActiveEventFilter;

    "SetClaimLimit(uint64)"(claimLimit?: null): SetClaimLimitEventFilter;
    SetClaimLimit(claimLimit?: null): SetClaimLimitEventFilter;

    "SetPaymentPolicy(bytes32[],uint256[])"(
      tierValues?: null,
      tierPrices_?: null
    ): SetPaymentPolicyEventFilter;
    SetPaymentPolicy(
      tierValues?: null,
      tierPrices_?: null
    ): SetPaymentPolicyEventFilter;

    "SetSalesController(address)"(
      salesController?: null
    ): SetSalesControllerEventFilter;
    SetSalesController(salesController?: null): SetSalesControllerEventFilter;

    "SetTiersActive(bytes32[],bool[])"(
      tiers?: null,
      active?: null
    ): SetTiersActiveEventFilter;
    SetTiersActive(tiers?: null, active?: null): SetTiersActiveEventFilter;

    "SetTimeOfSale(uint256,uint256)"(
      start?: null,
      end?: null
    ): SetTimeOfSaleEventFilter;
    SetTimeOfSale(start?: null, end?: null): SetTimeOfSaleEventFilter;

    "TokenSaleAddress(address)"(
      tokenSaleAddress_?: null
    ): TokenSaleAddressEventFilter;
    TokenSaleAddress(tokenSaleAddress_?: null): TokenSaleAddressEventFilter;

    "Upgrade(address)"(code?: null): UpgradeEventFilter;
    Upgrade(code?: null): UpgradeEventFilter;
  };

  estimateGas: {
    __semver(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      to: string,
      tierValue: BytesLike,
      tokenBuyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimLimit(overrides?: CallOverrides): Promise<BigNumber>;

    claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLeftClaimsForTier(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLeftClaimsForWallet(
      wallet: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      tokenAddress: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceInNativeTokens(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSales(overrides?: CallOverrides): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kernel: string,
      _salesController: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    setActive(
      isActive_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimLimit(
      claimLimit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSalesController(
      newSales: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTierPerWalletLimits(
      tierValues: BytesLike[],
      tierLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTiersActive(
      tierValues: BytesLike[],
      activity: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeOfSale(
      start_: BigNumberish,
      end_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenSaleAddress(
      tokenSaleAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalClaimsLimits(
      totalClaims: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tierPerWalletClaimed(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierPerWalletLimit(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierPrices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tiersActive(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tokenSaleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __semver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      to: string,
      tierValue: BytesLike,
      tokenBuyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLeftClaimsForTier(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLeftClaimsForWallet(
      wallet: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      tokenAddress: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceInNativeTokens(
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSales(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _kernel: string,
      _salesController: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActive(
      isActive_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimLimit(
      claimLimit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSalesController(
      newSales: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTierPerWalletLimits(
      tierValues: BytesLike[],
      tierLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTiersActive(
      tierValues: BytesLike[],
      activity: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeOfSale(
      start_: BigNumberish,
      end_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenSaleAddress(
      tokenSaleAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalClaimsLimits(
      totalClaims: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tierPerWalletClaimed(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierPerWalletLimit(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierPrices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tiersActive(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSaleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimsLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
