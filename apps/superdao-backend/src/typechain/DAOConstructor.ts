/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AdminSettingsStruct = {
  admins: string[];
  releaseManager: string;
  creator: string;
};

export type AdminSettingsStructOutput = [string[], string, string] & {
  admins: string[];
  releaseManager: string;
  creator: string;
};

export type AttributeStruct = {
  tierId: BytesLike;
  attrName: string;
  value: BytesLike;
};

export type AttributeStructOutput = [string, string, string] & {
  tierId: string;
  attrName: string;
  value: string;
};

export type NFTSettingsStruct = {
  openseaOwner: string;
  url: string;
  name: string;
  symbol: string;
  attributes: AttributeStruct[];
};

export type NFTSettingsStructOutput = [
  string,
  string,
  string,
  string,
  AttributeStructOutput[]
] & {
  openseaOwner: string;
  url: string;
  name: string;
  symbol: string;
  attributes: AttributeStructOutput[];
};

export type SaleSettingsStruct = {
  tiersValues: BytesLike[];
  tiersPrices: BigNumberish[];
  claimLimit: BigNumberish;
  tokenSaleAddress: string;
};

export type SaleSettingsStructOutput = [
  string[],
  BigNumber[],
  BigNumber,
  string
] & {
  tiersValues: string[];
  tiersPrices: BigNumber[];
  claimLimit: BigNumber;
  tokenSaleAddress: string;
};

export type DeploymentSettingsStruct = {
  adminSettings: AdminSettingsStruct;
  nftSettings: NFTSettingsStruct;
  openSaleSettings: SaleSettingsStruct;
  whiteListSaleSettings: SaleSettingsStruct;
};

export type DeploymentSettingsStructOutput = [
  AdminSettingsStructOutput,
  NFTSettingsStructOutput,
  SaleSettingsStructOutput,
  SaleSettingsStructOutput
] & {
  adminSettings: AdminSettingsStructOutput;
  nftSettings: NFTSettingsStructOutput;
  openSaleSettings: SaleSettingsStructOutput;
  whiteListSaleSettings: SaleSettingsStructOutput;
};

export interface DAOConstructorInterface extends utils.Interface {
  functions: {
    "__semver()": FunctionFragment;
    "deploy(uint8[],((address[],address,address),(address,string,string,string,(bytes32,string,bytes32)[]),(bytes32[],uint256[],uint64,address),(bytes32[],uint256[],uint64,address)),address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeFactory()": FunctionFragment;
    "safeSingleton()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateManager()": FunctionFragment;
    "upgrade(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "__semver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [BigNumberish[], DeploymentSettingsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;

  decodeFunctionResult(functionFragment: "__semver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {
    "Deployed(address,uint8[],tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgrade(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
}

export type DeployedEvent = TypedEvent<
  [string, number[], DeploymentSettingsStructOutput],
  {
    kernel: string;
    modules: number[];
    deploymentSettings: DeploymentSettingsStructOutput;
  }
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradeEvent = TypedEvent<[string], { code: string }>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface DAOConstructor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOConstructorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __semver(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      modules: BigNumberish[],
      deploymentSettings: DeploymentSettingsStruct,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      updateManagerProxy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeFactory(overrides?: CallOverrides): Promise<[string]>;

    safeSingleton(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateManager(overrides?: CallOverrides): Promise<[string]>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __semver(overrides?: CallOverrides): Promise<string>;

  deploy(
    modules: BigNumberish[],
    deploymentSettings: DeploymentSettingsStruct,
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    updateManagerProxy_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeFactory(overrides?: CallOverrides): Promise<string>;

  safeSingleton(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateManager(overrides?: CallOverrides): Promise<string>;

  upgrade(
    appCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __semver(overrides?: CallOverrides): Promise<string>;

    deploy(
      modules: BigNumberish[],
      deploymentSettings: DeploymentSettingsStruct,
      treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      updateManagerProxy_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeFactory(overrides?: CallOverrides): Promise<string>;

    safeSingleton(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateManager(overrides?: CallOverrides): Promise<string>;

    upgrade(appCode: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deployed(address,uint8[],tuple)"(
      kernel?: null,
      modules?: null,
      deploymentSettings?: null
    ): DeployedEventFilter;
    Deployed(
      kernel?: null,
      modules?: null,
      deploymentSettings?: null
    ): DeployedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgrade(address)"(code?: null): UpgradeEventFilter;
    Upgrade(code?: null): UpgradeEventFilter;
  };

  estimateGas: {
    __semver(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      modules: BigNumberish[],
      deploymentSettings: DeploymentSettingsStruct,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      updateManagerProxy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    safeSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateManager(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __semver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      modules: BigNumberish[],
      deploymentSettings: DeploymentSettingsStruct,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      updateManagerProxy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeSingleton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
