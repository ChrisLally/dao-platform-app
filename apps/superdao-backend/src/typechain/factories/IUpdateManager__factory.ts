/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IUpdateManager,
  IUpdateManagerInterface,
} from "../IUpdateManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "app",
        type: "bytes32",
      },
    ],
    name: "getAppCodeHistory",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "app",
        type: "bytes32",
      },
    ],
    name: "getLastAppCode",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "app",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "code",
        type: "address",
      },
    ],
    name: "setAppCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "appCode",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IUpdateManager__factory {
  static readonly abi = _abi;
  static createInterface(): IUpdateManagerInterface {
    return new utils.Interface(_abi) as IUpdateManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUpdateManager {
    return new Contract(address, _abi, signerOrProvider) as IUpdateManager;
  }
}
