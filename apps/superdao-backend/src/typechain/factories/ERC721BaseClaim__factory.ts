/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC721BaseClaim,
  ERC721BaseClaimInterface,
} from "../ERC721BaseClaim";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IKernel",
        name: "kernel",
        type: "address",
      },
    ],
    name: "Init",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    name: "SetActive",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "code",
        type: "address",
      },
    ],
    name: "Upgrade",
    type: "event",
  },
  {
    inputs: [],
    name: "CONTROLLER",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "contract IKernel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleTreeURI",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isActive_",
        type: "bool",
      },
    ],
    name: "setActive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "merkleTreeRoot_",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "merkleTreeURI_",
        type: "bytes",
      },
    ],
    name: "setMerkleTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "appCode",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040526064805460ff60b01b1916905561001961005b565b60ff1660a05234801561002b57600080fd5b506040516109de3803806109de83398101604081905261004a916100b2565b6001600160a01b0316608052610126565b606454600090600f600160b01b90910460ff161061007b5761007b6100e2565b60648054600160b01b900460ff16906016610095836100f8565b91906101000a81548160ff021916908360ff160217905550905090565b6000602082840312156100c457600080fd5b81516001600160a01b03811681146100db57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b600060ff821660ff81141561011d57634e487b7160e01b600052601160045260246000fd5b60010192915050565b60805160a05161087f61015f6000396000818161019301528181610354015261040b01526000818160ff015261049c015261087f6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063acec338a11610066578063acec338a1461014f578063b00f24cf14610162578063d4aae0c414610175578063ee0fc1211461018e578063f716aee9146101c757600080fd5b80630900f010146100a357806322f3e2d4146100b85780634ba8c9f3146100da578063572b6c05146100ef5780635c60da1b1461012f575b600080fd5b6100b66100b1366004610695565b6101de565b005b60c8546100c59060ff1681565b60405190151581526020015b60405180910390f35b6100e26102ab565b6040516100d19190610712565b6100c56100fd366004610695565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b610137610339565b6040516001600160a01b0390911681526020016100d1565b6100b661015d366004610733565b610352565b6100b6610170366004610750565b610409565b606454610137906201000090046001600160a01b031681565b6101b57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100d1565b6101d060ca5481565b6040519081526020016100d1565b6064546201000090046001600160a01b03166101f8610498565b6001600160a01b0316146040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b8152509061024f5760405162461bcd60e51b81526004016102469190610712565b60405180910390fd5b50806102596104e2565b80546001600160a01b0319166001600160a01b0392831617905560405190821681527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d9060200160405180910390a150565b60c980546102b8906107cc565b80601f01602080910402602001604051908101604052809291908181526020018280546102e4906107cc565b80156103315780601f1061030657610100808354040283529160200191610331565b820191906000526020600020905b81548152906001019060200180831161031457829003601f168201915b505050505081565b60006103436104e2565b546001600160a01b0316919050565b7f000000000000000000000000000000000000000000000000000000000000000061037c81610515565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b815250906103c05760405162461bcd60e51b81526004016102469190610712565b5060c8805460ff19168315159081179091556040519081527f739f22248654acf37bf505bd0621ca0239455fd8f43d16c0491010148ca68f979060200160405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000061043381610515565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b815250906104775760405162461bcd60e51b81526004016102469190610712565b506104806105b4565b60ca84905561049160c984846105fc565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314156104d8575060131936013560601c90565b503390565b905090565b60006104dd61051260017f797d7c7d0df25d67e029b044c5bcb2b89d68f6483382b5f85e64485950ed88d1610807565b90565b6064546000906201000090046001600160a01b031663ed82f4b8610537610498565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260ff85166044820152606401602060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae919061082c565b92915050565b60c85460408051808201909152600a8152694e4f545f41435449564560b01b60208201529060ff166105f95760405162461bcd60e51b81526004016102469190610712565b50565b828054610608906107cc565b90600052602060002090601f01602090048101928261062a5760008555610670565b82601f106106435782800160ff19823516178555610670565b82800160010185558215610670579182015b82811115610670578235825591602001919060010190610655565b5061067c929150610680565b5090565b5b8082111561067c5760008155600101610681565b6000602082840312156106a757600080fd5b81356001600160a01b03811681146106be57600080fd5b9392505050565b6000815180845260005b818110156106eb576020818501810151868301820152016106cf565b818111156106fd576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006106be60208301846106c5565b80151581146105f957600080fd5b60006020828403121561074557600080fd5b81356106be81610725565b60008060006040848603121561076557600080fd5b83359250602084013567ffffffffffffffff8082111561078457600080fd5b818601915086601f83011261079857600080fd5b8135818111156107a757600080fd5b8760208285010111156107b957600080fd5b6020830194508093505050509250925092565b600181811c908216806107e057607f821691505b6020821081141561080157634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561082757634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561083e57600080fd5b81516106be8161072556fea2646970667358221220820dabf831f449a57c88f022f601703a38534123a279401f604b9412f5225e2664736f6c634300080c0033";

type ERC721BaseClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721BaseClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721BaseClaim__factory extends ContractFactory {
  constructor(...args: ERC721BaseClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721BaseClaim> {
    return super.deploy(
      trustedForwarder,
      overrides || {}
    ) as Promise<ERC721BaseClaim>;
  }
  getDeployTransaction(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(trustedForwarder, overrides || {});
  }
  attach(address: string): ERC721BaseClaim {
    return super.attach(address) as ERC721BaseClaim;
  }
  connect(signer: Signer): ERC721BaseClaim__factory {
    return super.connect(signer) as ERC721BaseClaim__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721BaseClaimInterface {
    return new utils.Interface(_abi) as ERC721BaseClaimInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721BaseClaim {
    return new Contract(address, _abi, signerOrProvider) as ERC721BaseClaim;
  }
}
