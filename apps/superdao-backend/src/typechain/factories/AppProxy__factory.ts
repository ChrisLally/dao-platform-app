/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AppProxy, AppProxyInterface } from "../AppProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101f33803806101f383398101604081905261002f916100a6565b8061003861005c565b80546001600160a01b0319166001600160a01b0392909216919091179055506100fb565b600061009e61008c60017f797d7c7d0df25d67e029b044c5bcb2b89d68f6483382b5f85e64485950ed88d16100d6565b60001b6100a360201b6100211760201c565b905090565b90565b6000602082840312156100b857600080fd5b81516001600160a01b03811681146100cf57600080fd5b9392505050565b6000828210156100f657634e487b7160e01b600052601160045260246000fd5b500390565b60ea806101096000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6024565b603b565b565b90565b6000602c605e565b546001600160a01b0316919050565b3660008037600080366000845af43d6000803e8080156059573d6000f35b3d6000fd5b6000608b602160017f797d7c7d0df25d67e029b044c5bcb2b89d68f6483382b5f85e64485950ed88d16090565b905090565b60008282101560af57634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220a4c2b7c6d6e429ae3263c669f1a7acda7decdce7a195aa61793170800c51b25764736f6c634300080c0033";

type AppProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AppProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AppProxy__factory extends ContractFactory {
  constructor(...args: AppProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    implementation_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AppProxy> {
    return super.deploy(implementation_, overrides || {}) as Promise<AppProxy>;
  }
  getDeployTransaction(
    implementation_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(implementation_, overrides || {});
  }
  attach(address: string): AppProxy {
    return super.attach(address) as AppProxy;
  }
  connect(signer: Signer): AppProxy__factory {
    return super.connect(signer) as AppProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AppProxyInterface {
    return new utils.Interface(_abi) as AppProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AppProxy {
    return new Contract(address, _abi, signerOrProvider) as AppProxy;
  }
}
