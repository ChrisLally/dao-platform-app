/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UniswapV3OracleInterface extends utils.Interface {
  functions: {
    "__semver()": FunctionFragment;
    "getTradePrice(address,address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "increasePoolHistory(address,address,uint16)": FunctionFragment;
    "initialize(address,uint32,address)": FunctionFragment;
    "isInWhitelistTokenAddress(address)": FunctionFragment;
    "nativeTokenAddress()": FunctionFragment;
    "nativeTokenWrapperAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFactoryAddress(address)": FunctionFragment;
    "setTwapInterval(uint32)": FunctionFragment;
    "setWhitelistTokenAddress(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twapInterval()": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
    "upgrade(address)": FunctionFragment;
    "whitelistTokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "__semver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTradePrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolHistory",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInWhitelistTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenWrapperAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistTokenAddress",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "twapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "__semver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInWhitelistTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenWrapperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTokens",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgrade(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradeEvent = TypedEvent<[string], { code: string }>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface UniswapV3Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV3OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __semver(overrides?: CallOverrides): Promise<[string]>;

    getTradePrice(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    increasePoolHistory(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      uniswapFactory_: string,
      twapInterval_: BigNumberish,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInWhitelistTokenAddress(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nativeTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    nativeTokenWrapperAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactoryAddress(
      uniswapFactory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwapInterval(
      twapInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistTokenAddress(
      tokenAddress_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    twapInterval(overrides?: CallOverrides): Promise<[number]>;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  __semver(overrides?: CallOverrides): Promise<string>;

  getTradePrice(
    tokenSalePrice: string,
    tokenBuyPrice: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  implementation(overrides?: CallOverrides): Promise<string>;

  increasePoolHistory(
    tokenSalePrice: string,
    tokenBuyPrice: string,
    size: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    uniswapFactory_: string,
    twapInterval_: BigNumberish,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInWhitelistTokenAddress(
    tokenAddress_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nativeTokenAddress(overrides?: CallOverrides): Promise<string>;

  nativeTokenWrapperAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactoryAddress(
    uniswapFactory_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwapInterval(
    twapInterval_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistTokenAddress(
    tokenAddress_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  twapInterval(overrides?: CallOverrides): Promise<number>;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  upgrade(
    appCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    __semver(overrides?: CallOverrides): Promise<string>;

    getTradePrice(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<string>;

    increasePoolHistory(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      uniswapFactory_: string,
      twapInterval_: BigNumberish,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInWhitelistTokenAddress(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nativeTokenAddress(overrides?: CallOverrides): Promise<string>;

    nativeTokenWrapperAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFactoryAddress(
      uniswapFactory_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapInterval(
      twapInterval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistTokenAddress(
      tokenAddress_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    twapInterval(overrides?: CallOverrides): Promise<number>;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    upgrade(appCode: string, overrides?: CallOverrides): Promise<void>;

    whitelistTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgrade(address)"(code?: null): UpgradeEventFilter;
    Upgrade(code?: null): UpgradeEventFilter;
  };

  estimateGas: {
    __semver(overrides?: CallOverrides): Promise<BigNumber>;

    getTradePrice(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    increasePoolHistory(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      uniswapFactory_: string,
      twapInterval_: BigNumberish,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInWhitelistTokenAddress(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nativeTokenWrapperAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactoryAddress(
      uniswapFactory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwapInterval(
      twapInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistTokenAddress(
      tokenAddress_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    twapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __semver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradePrice(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePoolHistory(
      tokenSalePrice: string,
      tokenBuyPrice: string,
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      uniswapFactory_: string,
      twapInterval_: BigNumberish,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInWhitelistTokenAddress(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeTokenWrapperAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactoryAddress(
      uniswapFactory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwapInterval(
      twapInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistTokenAddress(
      tokenAddress_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    twapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
