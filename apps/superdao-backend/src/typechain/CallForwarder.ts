/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ForwardRequestStruct = {
  from: string;
  to: string;
  value: BigNumberish;
  nonce: BigNumberish;
  data: BytesLike;
};

export type ForwardRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  from: string;
  to: string;
  value: BigNumber;
  nonce: BigNumber;
  data: string;
};

export interface CallForwarderInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "__semver()": FunctionFragment;
    "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])": FunctionFragment;
    "executeSingle((address,address,uint256,uint256,bytes))": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getMessageHash((address,address,uint256,uint256,bytes))": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getSigner((address,address,uint256,uint256,bytes),bytes)": FunctionFragment;
    "verify((address,address,uint256,uint256,bytes),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__semver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [ForwardRequestStruct[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSingle",
    values: [ForwardRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [ForwardRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ForwardRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__semver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
}

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { from: string; to: string; data: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface CallForwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    __semver(overrides?: CallOverrides): Promise<[string]>;

    "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])"(
      reqs: ForwardRequestStruct[],
      signatures: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeBatch((address,address,uint256,uint256,bytes)[])"(
      reqs: ForwardRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeSingle((address,address,uint256,uint256,bytes))"(
      req: ForwardRequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeSingle((address,address,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMessageHash(
      req: ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSigner(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;

    verify(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  __semver(overrides?: CallOverrides): Promise<string>;

  "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])"(
    reqs: ForwardRequestStruct[],
    signatures: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeBatch((address,address,uint256,uint256,bytes)[])"(
    reqs: ForwardRequestStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeSingle((address,address,uint256,uint256,bytes))"(
    req: ForwardRequestStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeSingle((address,address,uint256,uint256,bytes),bytes)"(
    req: ForwardRequestStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getMessageHash(
    req: ForwardRequestStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  getSigner(
    req: ForwardRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  verify(
    req: ForwardRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    __semver(overrides?: CallOverrides): Promise<string>;

    "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])"(
      reqs: ForwardRequestStruct[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "executeBatch((address,address,uint256,uint256,bytes)[])"(
      reqs: ForwardRequestStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "executeSingle((address,address,uint256,uint256,bytes))"(
      req: ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeSingle((address,address,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageHash(
      req: ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSigner(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    verify(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MetaTransactionExecuted(address,address,bytes)"(
      from?: string | null,
      to?: string | null,
      data?: BytesLike | null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      from?: string | null,
      to?: string | null,
      data?: BytesLike | null
    ): MetaTransactionExecutedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    __semver(overrides?: CallOverrides): Promise<BigNumber>;

    "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])"(
      reqs: ForwardRequestStruct[],
      signatures: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeBatch((address,address,uint256,uint256,bytes)[])"(
      reqs: ForwardRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeSingle((address,address,uint256,uint256,bytes))"(
      req: ForwardRequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeSingle((address,address,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageHash(
      req: ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSigner(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __semver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])"(
      reqs: ForwardRequestStruct[],
      signatures: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeBatch((address,address,uint256,uint256,bytes)[])"(
      reqs: ForwardRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeSingle((address,address,uint256,uint256,bytes))"(
      req: ForwardRequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeSingle((address,address,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessageHash(
      req: ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigner(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      req: ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
