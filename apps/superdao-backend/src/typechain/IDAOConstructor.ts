/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AdminSettingsStruct = {
  admins: string[];
  releaseManager: string;
  creator: string;
};

export type AdminSettingsStructOutput = [string[], string, string] & {
  admins: string[];
  releaseManager: string;
  creator: string;
};

export type AttributeStruct = {
  tierId: BytesLike;
  attrName: string;
  value: BytesLike;
};

export type AttributeStructOutput = [string, string, string] & {
  tierId: string;
  attrName: string;
  value: string;
};

export type NFTSettingsStruct = {
  openseaOwner: string;
  url: string;
  name: string;
  symbol: string;
  attributes: AttributeStruct[];
};

export type NFTSettingsStructOutput = [
  string,
  string,
  string,
  string,
  AttributeStructOutput[]
] & {
  openseaOwner: string;
  url: string;
  name: string;
  symbol: string;
  attributes: AttributeStructOutput[];
};

export type SaleSettingsStruct = {
  tiersValues: BytesLike[];
  tiersPrices: BigNumberish[];
  claimLimit: BigNumberish;
  tokenSaleAddress: string;
};

export type SaleSettingsStructOutput = [
  string[],
  BigNumber[],
  BigNumber,
  string
] & {
  tiersValues: string[];
  tiersPrices: BigNumber[];
  claimLimit: BigNumber;
  tokenSaleAddress: string;
};

export type DeploymentSettingsStruct = {
  adminSettings: AdminSettingsStruct;
  nftSettings: NFTSettingsStruct;
  openSaleSettings: SaleSettingsStruct;
  whiteListSaleSettings: SaleSettingsStruct;
};

export type DeploymentSettingsStructOutput = [
  AdminSettingsStructOutput,
  NFTSettingsStructOutput,
  SaleSettingsStructOutput,
  SaleSettingsStructOutput
] & {
  adminSettings: AdminSettingsStructOutput;
  nftSettings: NFTSettingsStructOutput;
  openSaleSettings: SaleSettingsStructOutput;
  whiteListSaleSettings: SaleSettingsStructOutput;
};

export interface IDAOConstructorInterface extends utils.Interface {
  functions: {
    "deploy(uint8[],((address[],address,address),(address,string,string,string,(bytes32,string,bytes32)[]),(bytes32[],uint256[],uint64,address),(bytes32[],uint256[],uint64,address)),address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deploy",
    values: [BigNumberish[], DeploymentSettingsStruct, string]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;

  events: {};
}

export interface IDAOConstructor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDAOConstructorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      arg0: BigNumberish[],
      arg1: DeploymentSettingsStruct,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deploy(
    arg0: BigNumberish[],
    arg1: DeploymentSettingsStruct,
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deploy(
      arg0: BigNumberish[],
      arg1: DeploymentSettingsStruct,
      treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deploy(
      arg0: BigNumberish[],
      arg1: DeploymentSettingsStruct,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      arg0: BigNumberish[],
      arg1: DeploymentSettingsStruct,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
