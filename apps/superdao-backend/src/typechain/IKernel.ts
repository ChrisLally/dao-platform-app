/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IKernelInterface extends utils.Interface {
  functions: {
    "addPermission(bytes32,bytes32,uint8)": FunctionFragment;
    "connectApp(bytes32,address,bool)": FunctionFragment;
    "deployApp(bytes32,address,bytes)": FunctionFragment;
    "deploySafe(address[],uint256)": FunctionFragment;
    "getAppAddress(bytes32)": FunctionFragment;
    "getPermissions(bytes32,bytes32)": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "getUpdateManager()": FunctionFragment;
    "hasPermission(address,address,uint8)": FunctionFragment;
    "removePermission(bytes32,bytes32,uint8)": FunctionFragment;
    "resetApp(bytes32,address,bool)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "upgradeApp(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPermission",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectApp",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deployApp",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySafe",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissions",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermission",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetApp",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeApp",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploySafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeApp", data: BytesLike): Result;

  events: {
    "SafeDeployed(address)": EventFragment;
    "TreasuryChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SafeDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryChanged"): EventFragment;
}

export type SafeDeployedEvent = TypedEvent<[string], { safe: string }>;

export type SafeDeployedEventFilter = TypedEventFilter<SafeDeployedEvent>;

export type TreasuryChangedEvent = TypedEvent<[string], { treasury: string }>;

export type TreasuryChangedEventFilter = TypedEventFilter<TreasuryChangedEvent>;

export interface IKernel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKernelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployApp(
      id: BytesLike,
      appCode: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    getUpdateManager(overrides?: CallOverrides): Promise<[string]>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removePermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPermission(
    entity: BytesLike,
    app: BytesLike,
    permission: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectApp(
    id: BytesLike,
    appAddress: string,
    isNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployApp(
    id: BytesLike,
    appCode: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploySafe(
    owners: string[],
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

  getPermissions(
    entity: BytesLike,
    app: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  getUpdateManager(overrides?: CallOverrides): Promise<string>;

  hasPermission(
    entityAddress: string,
    appAddress: string,
    permissionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removePermission(
    entity: BytesLike,
    app: BytesLike,
    permission: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetApp(
    id: BytesLike,
    appAddress: string,
    isNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeApp(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deployApp(
      id: BytesLike,
      appCode: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    getUpdateManager(overrides?: CallOverrides): Promise<string>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removePermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury: string, overrides?: CallOverrides): Promise<void>;

    upgradeApp(id: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SafeDeployed(address)"(safe?: null): SafeDeployedEventFilter;
    SafeDeployed(safe?: null): SafeDeployedEventFilter;

    "TreasuryChanged(address)"(treasury?: null): TreasuryChangedEventFilter;
    TreasuryChanged(treasury?: null): TreasuryChangedEventFilter;
  };

  estimateGas: {
    addPermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployApp(
      id: BytesLike,
      appCode: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAppAddress(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getUpdateManager(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployApp(
      id: BytesLike,
      appCode: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploySafe(
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAppAddress(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissions(
      entity: BytesLike,
      app: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpdateManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPermission(
      entityAddress: string,
      appAddress: string,
      permissionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePermission(
      entity: BytesLike,
      app: BytesLike,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetApp(
      id: BytesLike,
      appAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeApp(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
