/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AdminControllerInterface extends utils.Interface {
  functions: {
    "SUDO()": FunctionFragment;
    "__semver()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "adminAddresses()": FunctionFragment;
    "batchBurn(uint32[])": FunctionFragment;
    "batchCall(address[],bytes[])": FunctionFragment;
    "batchMint(address[],bytes32[])": FunctionFragment;
    "burn(uint32)": FunctionFragment;
    "call(address,bytes)": FunctionFragment;
    "creator()": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address,address[],address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "mint(address,bytes32)": FunctionFragment;
    "openSale__setPaymentPolicy(bytes32[],uint256[])": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setCreator(address)": FunctionFragment;
    "setRestrictBurnPolicy(bool)": FunctionFragment;
    "upgrade(address)": FunctionFragment;
    "whitelistSale__setMerkleTree(bytes32,bytes)": FunctionFragment;
    "whitelistSale__setPaymentPolicy(bytes32[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SUDO", values?: undefined): string;
  encodeFunctionData(functionFragment: "__semver", values?: undefined): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "adminAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurn",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCall",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string[], string]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openSale__setPaymentPolicy",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(functionFragment: "setCreator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRestrictBurnPolicy",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistSale__setMerkleTree",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSale__setPaymentPolicy",
    values: [BytesLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "SUDO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__semver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openSale__setPaymentPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRestrictBurnPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSale__setMerkleTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSale__setPaymentPolicy",
    data: BytesLike
  ): Result;

  events: {
    "AddAdmin(address)": EventFragment;
    "Init(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RemoveAdmin(address)": EventFragment;
    "Upgrade(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
}

export type AddAdminEvent = TypedEvent<[string], { admin: string }>;

export type AddAdminEventFilter = TypedEventFilter<AddAdminEvent>;

export type InitEvent = TypedEvent<[string], { kernel: string }>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type RemoveAdminEvent = TypedEvent<[string], { admin: string }>;

export type RemoveAdminEventFilter = TypedEventFilter<RemoveAdminEvent>;

export type UpgradeEvent = TypedEvent<[string], { code: string }>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface AdminController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdminControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SUDO(overrides?: CallOverrides): Promise<[number]>;

    __semver(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    batchBurn(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCall(
      addresses: string[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchMint(
      to: string[],
      tierValues: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    call(
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _kernel: string,
      admins: string[],
      creatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdmin(
      adminAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    mint(
      to: string,
      tierValue: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreator(
      newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRestrictBurnPolicy(
      burnPolicy: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistSale__setMerkleTree(
      merkleRoot: BytesLike,
      merkleProofIpfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SUDO(overrides?: CallOverrides): Promise<number>;

  __semver(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddresses(overrides?: CallOverrides): Promise<string[]>;

  batchBurn(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCall(
    addresses: string[],
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchMint(
    to: string[],
    tierValues: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  call(
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    _kernel: string,
    admins: string[],
    creatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdmin(adminAddress: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  mint(
    to: string,
    tierValue: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openSale__setPaymentPolicy(
    tierValues: BytesLike[],
    tierPrices_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreator(
    newCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRestrictBurnPolicy(
    burnPolicy: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    appCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistSale__setMerkleTree(
    merkleRoot: BytesLike,
    merkleProofIpfsHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistSale__setPaymentPolicy(
    tierValues: BytesLike[],
    tierPrices_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SUDO(overrides?: CallOverrides): Promise<number>;

    __semver(overrides?: CallOverrides): Promise<string>;

    addAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    adminAddresses(overrides?: CallOverrides): Promise<string[]>;

    batchBurn(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCall(
      addresses: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    batchMint(
      to: string[],
      tierValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    call(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    creator(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      _kernel: string,
      admins: string[],
      creatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(adminAddress: string, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      tierValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    openSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;

    setCreator(newCreator: string, overrides?: CallOverrides): Promise<void>;

    setRestrictBurnPolicy(
      burnPolicy: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(appCode: string, overrides?: CallOverrides): Promise<void>;

    whitelistSale__setMerkleTree(
      merkleRoot: BytesLike,
      merkleProofIpfsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddAdmin(address)"(admin?: null): AddAdminEventFilter;
    AddAdmin(admin?: null): AddAdminEventFilter;

    "Init(address)"(kernel?: null): InitEventFilter;
    Init(kernel?: null): InitEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RemoveAdmin(address)"(admin?: null): RemoveAdminEventFilter;
    RemoveAdmin(admin?: null): RemoveAdminEventFilter;

    "Upgrade(address)"(code?: null): UpgradeEventFilter;
    Upgrade(code?: null): UpgradeEventFilter;
  };

  estimateGas: {
    SUDO(overrides?: CallOverrides): Promise<BigNumber>;

    __semver(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurn(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCall(
      addresses: string[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchMint(
      to: string[],
      tierValues: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    call(
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kernel: string,
      admins: string[],
      creatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdmin(
      adminAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      tierValue: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreator(
      newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRestrictBurnPolicy(
      burnPolicy: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistSale__setMerkleTree(
      merkleRoot: BytesLike,
      merkleProofIpfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SUDO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __semver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBurn(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCall(
      addresses: string[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchMint(
      to: string[],
      tierValues: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    call(
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _kernel: string,
      admins: string[],
      creatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      adminAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      tierValue: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreator(
      newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRestrictBurnPolicy(
      burnPolicy: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      appCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistSale__setMerkleTree(
      merkleRoot: BytesLike,
      merkleProofIpfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistSale__setPaymentPolicy(
      tierValues: BytesLike[],
      tierPrices_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
